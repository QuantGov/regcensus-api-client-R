year=seriesYear,
jurisdiction=jurisdiction.jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series=series$seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series=seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series="series.seriesName",
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series="series.seriesName",
values=seriesValue,
year=seriesYear,
jurisdiction="jurisdiction.jurisdictionName") ->nationalRestrictions
names(totalRestrictions)
totalRestrictions %>% select(series=totalRestrictions$series$seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=totalRestrictions$jurisdiction$jurisdictionName) ->nationalRestrictions
View(totalRestrictions)
totalRestrictions %>% select(
values=seriesValue,
year=seriesYear,
jurisdiction=totalRestrictions$jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(
values=seriesValue,
year=seriesYear,
totalRestrictions$jurisdiction$jurisdictionName) ->nationalRestrictions
packrat::init(options = list(external.packages = c("jsonlite", "tidyverse")))
install.packages("RevoUtils")
packrat::init(options = list(external.packages = c("jsonlite", "tidyverse")))
devtools::load_all(".")
library(regdataAPI)
get_values(0,c("RG_RSTR0000001A"),2018,NA,NA,FALSE)
values_df <- as.data.frame(json)
return(values_df)
# Values API request requires three parameters
#   1. seriesCode(s)
#   2. time(s)
get_values <- function(geoCode, seriesCode, time, agency = NA, industry = NA, dateIsRange = TRUE) {
# E.g., http://ec2-54-225-4-62.compute-1.amazonaws.com:8080/regdata/values?geo=06&seriesCode=RG_RSTR00000002NA&time=2019
geoCodestr <- paste(geoCode, collapse=",")
seriesCodestr <- paste(seriesCode, collapse=",")
timestr <- paste(time, collapse = ",")
if (dateIsRange) {
apicall <- paste0(get_baseURL(), "/values?geos=", geoCodestr, "&seriesCodes=", seriesCodestr, "&time=", timestr, "&dateIsRange=", dateIsRange)
} else {
apicall <- paste0(get_baseURL(), "/values?geos=", geoCodestr, "&seriesCodes=", seriesCodestr, "&time=", timestr)
}
json <- jsonlite::fromJSON(apicall, flatten = T) #8/25/2019: Kofi added the flatten option to T, included full fromJSON reference
values_df <- as.data.frame(json)
return(values_df)
}
get_values(0,c("RG_QLTY1000470Z"),2018,NA,NA,FALSE)
View(json)
get_values(0,c("RG_QLTY1000470Z","RG_QLTY1000471Z","RG_QLTY1000472Z"),2018,NA,NA,FALSE)
library(regdataAPI)
library(regdataAPI)
library(regdataAPI)
get_values(0,c("RG_QLTY1000470Z","RG_QLTY1000471Z","RG_QLTY1000472Z"),2018,NA,NA,FALSE)
library(regdataAPI)
library(regdataAPI)
topics<-get_topics()
View(topics)
agencies <- get_agencies()
View(agencies)
install.packages("snakecase")
library(snakecase)
to_snake_case("ListRespect")
library(regdataAPI)
View(regdataAPI::get_topics())
View(get_industries())
library(regdataAPI)
version(snakecase)
snakecase
library(regdataAPI)
View(agencies<-regdataAPI::get_agencies())
library(regdataAPI)
list_agencies()
View(list_agencies())
View(list_topics())
View(list_jurisdictions())
View(list_series())
View(list_seriesyear())
View(list_seriesyear())
series_year<-list_seriesyear()
get_values(38,c(1,2),c(2010:2018))
library(regdataAPI)
get_values(38,c(1,2),c(2010:2018))
get_values(jurisdiction = 38, series=c(1,2,3),time=c(2010:2012),industry=c('0','111'))
get_values(jurisdiction = 38, series=c(1,2,3),time=c(2010:2012),industry=c('0','111'), agency = c(91,92))
get_values(jurisdiction = 38, series=c(1,2,3),time=c(2010:2012),industry=c('0','111'), agency =)
library(regdataAPI)
get_values(jurisdiction = 38, series=c(1,2,3),time=c(2010:2012))
get_values(jurisdiction = 38, series=c(1,2,3),time=c(2010,2019))
get_values(jurisdiction = 38, series=c(1,2,3),time=c(1970,2019))
library(regdataAPI)
get_values(jurisdiction = 38, series=c(1,2,3),time=c(1970,2019))
library(regdataAPI)
library(regdataAPI)
get_values(jurisdiction = 38, series=c(1,2,3),time=c(1970,2019))
get_values(jurisdiction = 38, series=c(1,2,3),time=NA
)
library(regdataAPI)
get_values(jurisdiction = 38, series=c(1,2,3),time=NA)
library(regdataAPI)
get_values(jurisdiction = 38,time=NA)
get_values(jurisdiction = 38,time=NA, series=NA)
library(regdataAPI)
get_values(jurisdiction = 38,time=NA, series=NA)
print(list_series())
library(regdataAPI)
get_values(jurisdiction = 38,time=NA, series=NA)
t1<-get_values(jurisdiction = 38,time=NA, series=NA)
t1<-get_values(jurisdiction = 38,time=c(1980,2000),series=c(1,2,3))
View(t1)
t1<-get_values(jurisdiction = 38,time=c(1980,2000),series=c(1,2,3,91,92))
View(t1)
t1<-get_values(jurisdiction = 38,time=c(1980,2000),series=c(1,2,3,91,92),agency=c(91,92,93,94))
list_agencies()
usethis::use_vignette("RegCensus API")
usethis::use_vignette("RegCensus-API")
vignette("broom")
list_series(by=c('series','agencies'))
list_series(by=c('agencies'))
library(regdataAPI)
list_series(by=c('agencies'))
library(regdataAPI)
list_series(by=c('agencies'))
list_series(by=c('all'))
list_series(by=c('series'))
list_series(by=c('jurisdictions'))
list_series(by=c('agencies'))
list_series(by=c('all'))
list_series(by=c('topics'))
library(regdataAPI)
list_series(by=c('topics'))
list_series(by=c('all'))
list_series(by=c('jurisdictions'))
list_series(by=c('jurisdictions'))
list_series(by=c('agencies'))
list_series(by=c('agencies'),id=65)
library(regdataAPI)
list_series(by=c('topics'))
list_series(by=c('agencies'),id=65)
get_geoCodes()
get_geoCodes(38)
get_geoCodes(10)
get_seriesCodes(91)
get_seriesyear()
library(progress)
help("progress_estimated")
pb<-progress_bar$new()
pb<-progress_bar$new(format = " downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width=60)
for(i in 1:100){}
pb <- progress_bar$new(
format = " downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
jsonlite::fromJSON()
fromJSON
get_agencies()
get_industries()
get_industries(38)
library(regdataAPI)
get_industries(38)
View(get_industries(38))
View(get_industries(84))
View(get_industries(10))
View(get_industries(1))
View(get_industries(10))
View(get_industries(11))
View(get_industries(1))
industries<-(get_industries(1))
View(get_industries(1))
industries<-(get_industries(1))
industries<-(get_industries(10))
get_agencies(38)
get_jurisdictions()
list_series(91)
list_topics(1)
list_series(c(1,2))
list_series(1)
get_industries()
get_industries()
get_industries()
get_industries()
get_jurisdictions()
get_industries()
get_industries(38)
get_industries(38)
get_industries(38)
get_values(jurisdiction = 38, series = c(1,2), time = c(2010,2018))
get_values(jurisdiction = 38, series = c(1,2), time = c(2010,2018))
get_values(jurisdiction = 38,  time = c(2010,2018))
library(regdataAPI)
list_seriesyear()
sy <- get_seriesyear(38)
sy <- get_seriesyear(c(38,84))
sy <- get_seriesyear(c(84))
get_values(jurisdiction = c(38,84))
get_values(jurisdiction = c(38,84), series=c(1,2))
get_values(jurisdiction = c(38,84), series=c(1,2), time = c(1970,2018))
#Identify all agencies
#get_agencies()
#Find the available series for this agency, suppose agency_ids 81 and 84
#list_series(id=91, by='agencies')
##Call the get_values() for this agency and series 91 and 92
get_values(jurisdiction = 38, series = c(91,92), time = c(1990,2018), agency = c(81,84))
list_series()
get_values(jurisdiction = 38, series = c(91,92), time = c(1990,2000), industry = c('111','33'))
get_values(jurisdiction = 38, series = c(92), time = c(1990,2000), industry = c('111','33'))
get_values(jurisdiction = 38, series = c(92), time = c(1990,2000), industry = c('111','33'), agency = 66)
get_values(jurisdiction = 38, series = c(92), time = c(1990,2000), industry = c('111','33'), agency = 66)
agencies <- get_agencies()
agency_by_industry <- get_values(jurisdiction = 38,
series = c(92), time = c(1990,2000),
industry = c('111','33'),
agency = 66)
agencies <- get_agencies()
agency_by_industry <- get_values(jurisdiction = 38,
series = c(92), time = c(1990,2000),
industry = c('111','33'),
agency = 66)
agency_restrictions_ind <- agency_by_industry %>%
dplyr::left_join(agencies, by=c('agency_id'='agency_agency_id'))
agencies <- get_agencies()
agency_by_industry <- get_values(jurisdiction = 38,
series = c(92), time = c(1990,2000),
industry = c('111','33'),
agency = 66)
agency_restrictions_ind <- agency_by_industry %>%
dplyr::left_join(agencies, by=c('agency_agency_id'='agency_id'))
head(agency_restrictions_ind)
library(regdataAPI)
install.packages("pander")
help(snakecase)
help("snakecase")
library(snakecase)
help(snakecase)
help("snakecase")
??snakecase
help(pander)
devtools::use_mit_license("Mercatus Center")
usethis::use_mit_license()
usethis::use_mit_license("Mercatus Center")
usethis::use_testthat()
install.packages("testthat")
usethis::use_testthat()
devtools::document()
install()
devtools::install()
library(regcensusAPI)
help(regcensusAPI)
help("regcensusAPI")
devtools::document()
??regcensusAPI
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("curl")
library(curl)
get_agencies(38)
library(curl)
usethis::use_testthat()
usethis::use_test()
usethis::use_test(null,open = interactive())
use_test()
usethis::use_test()
usethis::use_test("data_frames.R")
use_test()
devtools::test()
library(regcensusAPI)
examples(regcensusAPI)
examples("regcensusAPI")
example("regcensusAPI")
example("dplyr")
install_github("QuantGov/regcensus-api-client-R")
install.packages("githubinstall")
install_github("QuantGov/regcensus-api-client-R")
library(devtools)
install.packages("devtools")
install_github("QuantGov/regcensus-api-client-R")
library(devtools)
remove.packages(devtools)
remove.packages("devtools")
install.packages("devtools",dep=T)
library(devtools)
devtools::document()
get_values(jurisdiction = 38, series=9,time=c(1990,1991))
devtools::load_all(".")
get_values(jurisdiction = 38, series=9,time=c(1990,1991))
get_values(jurisdiction = 38, series=9,time=c(2017))
get_values(jurisdiction = 38, series=1,time=c(2017))
get_values(jurisdiction = 38, series=1,time=c(2017),industry = c('0'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('0'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('111'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('11'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('112'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('114'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('113'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('111'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('210'))
get_values(jurisdiction = 38, series=9,time=c(2010:2017),industry = c('111'))
get_values(jurisdiction = 33, series=9,time=c(2018),industry = c('325'))
library(tidyverse)
install.packages("tidyverse",dep=T)
install.packages("snakecase",dep=T)
install.packages("jsonlite",dep=T)
install.packages("curl",dep=T)
install.packages("pander",dep=T)
library(devtools)
library(devtools)
library(regcensusAPI)
get_agencies()
install.packages("curl")
get_agencies()
View(agencies)
View(agencies)
get_agencies()
install.packages("jsonlite")
install.packages(c("pander","dplyr","purr","tibble","tringr"))
install.packages("snakecase")
install.packages("stringr")
library(regcensusAPI)
install.packages("testthat")
install.packages("testthat", dependencies = T)
install.packages("tidyverse",dep=T)
library(regcensusAPI)
get_agencies()
install.packages(c("pbapply","urltools","R.cache"))
devtools::build_readme()
devtools::build_readme()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(regcensusAPI)
g1 <- get_agencies()
devtools::document()
get_agencies()
t1 <- get_agencies()
View(t1)
t2 <- get_jurisdictions()
t3 <- get_series_period()
View(t3)
t3 <- get_series_period()
t3 <- get_series_period()
t2 <- get_jurisdictions()
t2 <- get_jurisdictions()
devtools::release()
devtools::spell_check()
devtools::release()
devtools::check_rhub()
devtools::check_rhub()
devtools::document()
update.packages("roxygen2")
devtools::check_rhub()
devtools::release()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::release()
devtools::use_news_md()
usethis::use_news_md()
usethis::use_news_md()
devtools::release()
devtools::release()
devtools::use_cran_comments()
usethis::use_cran_comments()
devtools::document()
devtools::check_cran()
devtools::build()
devtools::release()
devtools::release()
4/7 + 4/7
8/7
6 + 4/7
4//7 + 4/7 + 4/7
c <- c(1,2,3,5)
length(c)
help(seq)
6 + 4*0/7, 6 + 4*1/7, 6 + 4*2/7,
seq(6, 55, (4/7))
8/7 + 6
12/7+6
16/6+6
16/7+6
length(seq(6, 55, 4/7))
abbs[]
abbs  <- c("MA","ME","MI","MO","MU")
ind <- c(FALSE, FALSE, FALSE, FALSE)
abbs[]
abbs[,]
abbs[,ind]
abbs[ind]
abbs[!ind]
abbs[ind]
which(abbs %in% c("AK","MA","CA","MI"))
which(!abbs %in% c("AK","MA","CA","MI"))
library(regcensusAPI)
install.packages("R.cache")
library(R.cache)
install.packages("devtools")
remove.packages(regcensusAPI)
remove.packages("regcensusAPI")
install.packages(c("pbapply","urltools","R.cache"))
install.packages("curl")
install.packages("D:/Mercatus/Projects/PolicyAnalytics/regcensusAPI_0.1.2.zip", repos = NULL, type = "win.binary")
library(regcensusAPI)
get_agencies()
View(get_agencies())
library(jsonlite)
library(pander)
install.packages("devtools")
library(tidyverse)
install.packages("tidyverse")
install.packages("jsonlite", type="source")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"',con="~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type="source")
Sys.which("make")
install.packages("jsonlite")
install.packages("jsonlite","source")
.libPaths()
install.packages("jsonlite","source")
install.packages("jsonlite","source")
install.packages("jsonlite","source")
install.packages("tidyverse","pander","R.cache")
install.packages(c("tidyverse","pander","R.cache"),dep=T)
install.packages(c("snakecase","pbapply","urltools"),dep=T)
warnings()
install.packages(c("pander","dplyr","purrr","stringr","tibble"),dep=T)
install.packages("devtools")
warnings()
install.packages("snakecase")
warnings()
Sys.getenv()
Sys.getenv()
install.packages("tidyverse")
install.packages("tidyverse")
install.packages(c("snakecase","pander","pbapply","urltools","R.cache"))
install.packages(c("dplyr", "jsonlite", "pbapply"))
library(regcensusAPI)
View(get_agencies())
help("log")
help(all)
help("identical")
devtools::document()
devtools::document()
library(regcensusAPI)
get_series()
View(get_series())
View(get_series(1))
install.packages("jsonlite")
install.packages(c("broom", "ellipsis", "etm", "git2r", "glue", "modelr", "pillar", "pkgbuild", "polspline", "ps", "purrrlyr", "rematch2", "rex", "rlang", "scales", "tibble", "tidyr", "tidyselect", "usethis", "vctrs", "withr", "xml2", "zoo"))
install.packages(c("pander","snakecase"),dep=T)
remove.packages("regcensusAPI")
install.packages("D:/Mercatus/Projects/PolicyAnalytics/regcensusAPI_0.1.2.1.zip", repos = NULL, type = "win.binary")
ol_restrictions <- regcensusAPI::get_values(72,series = 10,"2017-01-01",documentType = 6,date_is_range = F, summary = FALSE)
ol_restrictions <- regcensusAPI::get_values(72,series = 10,"2017-01-01",documentType = 6,date_is_range = F, summary = FALSE)
install.packages("D:/Mercatus/Projects/PolicyAnalytics/regcensusAPI_0.1.2.1.zip", repos = NULL, type = "win.binary")
ol_restrictions <- regcensusAPI::get_values(72,series = 10,"2017-01-01",documentType = 6,date_is_range = F, summary = FALSE)
ol_restrictions <- regcensusAPI::get_values(72,series = 10,"2017-01-01",documentType = 6,date_is_range = F, summary = FALSE)
ol_restrictions <- regcensusAPI::get_values(72,series = 10,"2017-01-01",documentType = 6,date_is_range = F, summary = TRUE)
ol_restrictions <- regcensusAPI::get_values(72,series = 10,"2017-01-01",documentType = 6,date_is_range = F, summary = TRUE)
install.packages("D:/Mercatus/Projects/PolicyAnalytics/regcensusAPI_0.1.2.2.zip", repos = NULL, type = "win.binary")
install.packages("brlm")
library(regcensusAPI)
get_values
get_values(jurisdiction = 40, summary = FALSE,document_type=1,date=019-02-20)
get_values(jurisdiction = 40, summary = FALSE,document_type=1,date=019-02-20,series = 27)
get_values(jurisdiction = 40, summary = FALSE,document_type=1,date=2019-02-20,series = 27)
get_values(jurisdiction = 40, summary = FALSE,document_type=1,date='2019-02-20',series = 27)
get_values(jurisdiction = 40, summary = FALSE,document_type=1,date='2019-02-20',series = 27,date_is_range = FALSE)
devtools::document()
library(regcensusAPI)
get_values(jurisdiction = 40, summary = FALSE,document_type=1,date='2019-02-20',series = 27,date_is_range = FALSE)
t1 <- get_values(jurisdiction = 40, summary = FALSE,document_type=1,date='2019-02-20',series = 27,date_is_range = FALSE)
View(t1)
library(regcensusAPI)
library(regcensusAPI)
renv::activate()
renv::activate()
install.packages("testthat")
install.packages("knitr",dependencies = T)
install.packages("knitr",dependencies = T)
install.packages("knitr")
install.packages("tinytex")
install.packages("markdown")
install.packages("rmarkdown")
install.packages(c("curl","pbapply","urltools","R.cache"))
library(regcensusAPI)
renv::init()
renv::deactivate()
detach("package:regcensusAPI", unload = TRUE)
.libPaths()
remove.packages("regcensusAPI")
