<<<<<<< HEAD
install.packages("testthat")
help(testthat)
??testthat
devtools::load_all(".")
library(regdata)
regdata::get_agencies()
library(jsonlite)
regdata::get_agencies()
rm(regdata)
devtools::load_all(".")
regdata::get_agencies()
agencies <- regdata::get_agencies()
View(agencies)
help("regdata")
??regdata
seriesListUS<-regdata::get_seriesyear(38)
View(seriesListUS)
jurisdictions <- regdata::get_jurisdictions()
View(jurisdictions)
metadata <- regdata::get_seriesyear()
View(metadata)
totalRestrictions <- regdata::get_values(geoCode = c("0","00","000"),
seriesCode = "RG_RSTR0000001A",
time = c(1970,2016),
dateIsRange = TRUE)
View(totalRestrictions)
totalRestrictions %>% select(series=series.seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction.jurisdictionName) ->nationalRestrictions
library(tidyverse)
totalRestrictions %>% select(series=series.seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction.jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series=`series.seriesCode`,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction.jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series=series$seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction.jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series=series$seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series=seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series="series.seriesName",
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series="series.seriesName",
values=seriesValue,
year=seriesYear,
jurisdiction="jurisdiction.jurisdictionName") ->nationalRestrictions
names(totalRestrictions)
totalRestrictions %>% select(series=totalRestrictions$series$seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=totalRestrictions$jurisdiction$jurisdictionName) ->nationalRestrictions
View(totalRestrictions)
totalRestrictions %>% select(
values=seriesValue,
year=seriesYear,
jurisdiction=totalRestrictions$jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(
values=seriesValue,
year=seriesYear,
totalRestrictions$jurisdiction$jurisdictionName) ->nationalRestrictions
packrat::init(options = list(external.packages = c("jsonlite", "tidyverse")))
install.packages("RevoUtils")
packrat::init(options = list(external.packages = c("jsonlite", "tidyverse")))
devtools::load_all(".")
library(regdataAPI)
get_values(0,c("RG_RSTR0000001A"),2018,NA,NA,FALSE)
values_df <- as.data.frame(json)
return(values_df)
# Values API request requires three parameters
#   1. seriesCode(s)
#   2. time(s)
get_values <- function(geoCode, seriesCode, time, agency = NA, industry = NA, dateIsRange = TRUE) {
# E.g., http://ec2-54-225-4-62.compute-1.amazonaws.com:8080/regdata/values?geo=06&seriesCode=RG_RSTR00000002NA&time=2019
geoCodestr <- paste(geoCode, collapse=",")
seriesCodestr <- paste(seriesCode, collapse=",")
timestr <- paste(time, collapse = ",")
if (dateIsRange) {
apicall <- paste0(get_baseURL(), "/values?geos=", geoCodestr, "&seriesCodes=", seriesCodestr, "&time=", timestr, "&dateIsRange=", dateIsRange)
} else {
apicall <- paste0(get_baseURL(), "/values?geos=", geoCodestr, "&seriesCodes=", seriesCodestr, "&time=", timestr)
}
json <- jsonlite::fromJSON(apicall, flatten = T) #8/25/2019: Kofi added the flatten option to T, included full fromJSON reference
values_df <- as.data.frame(json)
return(values_df)
}
get_values(0,c("RG_QLTY1000470Z"),2018,NA,NA,FALSE)
View(json)
get_values(0,c("RG_QLTY1000470Z","RG_QLTY1000471Z","RG_QLTY1000472Z"),2018,NA,NA,FALSE)
library(regdataAPI)
library(regdataAPI)
library(regdataAPI)
get_values(0,c("RG_QLTY1000470Z","RG_QLTY1000471Z","RG_QLTY1000472Z"),2018,NA,NA,FALSE)
library(regdataAPI)
library(regdataAPI)
topics<-get_topics()
View(topics)
agencies <- get_agencies()
View(agencies)
install.packages("snakecase")
library(snakecase)
to_snake_case("ListRespect")
library(regdataAPI)
View(regdataAPI::get_topics())
View(get_industries())
library(regdataAPI)
version(snakecase)
snakecase
library(regdataAPI)
View(agencies<-regdataAPI::get_agencies())
library(regdataAPI)
list_agencies()
View(list_agencies())
View(list_topics())
View(list_jurisdictions())
View(list_series())
View(list_seriesyear())
View(list_seriesyear())
series_year<-list_seriesyear()
get_values(38,c(1,2),c(2010:2018))
library(regdataAPI)
get_values(38,c(1,2),c(2010:2018))
get_values(jurisdiction = 38, series=c(1,2,3),time=c(2010:2012),industry=c('0','111'))
get_values(jurisdiction = 38, series=c(1,2,3),time=c(2010:2012),industry=c('0','111'), agency = c(91,92))
get_values(jurisdiction = 38, series=c(1,2,3),time=c(2010:2012),industry=c('0','111'), agency =)
library(regdataAPI)
get_values(jurisdiction = 38, series=c(1,2,3),time=c(2010:2012))
get_values(jurisdiction = 38, series=c(1,2,3),time=c(2010,2019))
get_values(jurisdiction = 38, series=c(1,2,3),time=c(1970,2019))
library(regdataAPI)
get_values(jurisdiction = 38, series=c(1,2,3),time=c(1970,2019))
library(regdataAPI)
library(regdataAPI)
get_values(jurisdiction = 38, series=c(1,2,3),time=c(1970,2019))
get_values(jurisdiction = 38, series=c(1,2,3),time=NA
)
library(regdataAPI)
get_values(jurisdiction = 38, series=c(1,2,3),time=NA)
library(regdataAPI)
get_values(jurisdiction = 38,time=NA)
get_values(jurisdiction = 38,time=NA, series=NA)
library(regdataAPI)
get_values(jurisdiction = 38,time=NA, series=NA)
print(list_series())
library(regdataAPI)
get_values(jurisdiction = 38,time=NA, series=NA)
t1<-get_values(jurisdiction = 38,time=NA, series=NA)
t1<-get_values(jurisdiction = 38,time=c(1980,2000),series=c(1,2,3))
View(t1)
t1<-get_values(jurisdiction = 38,time=c(1980,2000),series=c(1,2,3,91,92))
View(t1)
t1<-get_values(jurisdiction = 38,time=c(1980,2000),series=c(1,2,3,91,92),agency=c(91,92,93,94))
list_agencies()
usethis::use_vignette("RegCensus API")
usethis::use_vignette("RegCensus-API")
vignette("broom")
list_series(by=c('series','agencies'))
list_series(by=c('agencies'))
library(regdataAPI)
list_series(by=c('agencies'))
library(regdataAPI)
list_series(by=c('agencies'))
list_series(by=c('all'))
list_series(by=c('series'))
list_series(by=c('jurisdictions'))
list_series(by=c('agencies'))
list_series(by=c('all'))
list_series(by=c('topics'))
library(regdataAPI)
list_series(by=c('topics'))
list_series(by=c('all'))
list_series(by=c('jurisdictions'))
list_series(by=c('jurisdictions'))
list_series(by=c('agencies'))
list_series(by=c('agencies'),id=65)
library(regdataAPI)
list_series(by=c('topics'))
list_series(by=c('agencies'),id=65)
get_geoCodes()
get_geoCodes(38)
get_geoCodes(10)
get_seriesCodes(91)
get_seriesyear()
library(progress)
help("progress_estimated")
pb<-progress_bar$new()
pb<-progress_bar$new(format = " downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width=60)
for(i in 1:100){}
pb <- progress_bar$new(
format = " downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
jsonlite::fromJSON()
fromJSON
get_agencies()
get_industries()
get_industries(38)
library(regdataAPI)
get_industries(38)
View(get_industries(38))
View(get_industries(84))
View(get_industries(10))
View(get_industries(1))
View(get_industries(10))
View(get_industries(11))
View(get_industries(1))
industries<-(get_industries(1))
View(get_industries(1))
industries<-(get_industries(1))
industries<-(get_industries(10))
get_agencies(38)
get_jurisdictions()
list_series(91)
list_topics(1)
list_series(c(1,2))
list_series(1)
get_industries()
get_industries()
get_industries()
get_industries()
get_jurisdictions()
get_industries()
get_industries(38)
get_industries(38)
get_industries(38)
get_values(jurisdiction = 38, series = c(1,2), time = c(2010,2018))
get_values(jurisdiction = 38, series = c(1,2), time = c(2010,2018))
get_values(jurisdiction = 38,  time = c(2010,2018))
library(regdataAPI)
list_seriesyear()
sy <- get_seriesyear(38)
sy <- get_seriesyear(c(38,84))
sy <- get_seriesyear(c(84))
get_values(jurisdiction = c(38,84))
get_values(jurisdiction = c(38,84), series=c(1,2))
get_values(jurisdiction = c(38,84), series=c(1,2), time = c(1970,2018))
#Identify all agencies
#get_agencies()
#Find the available series for this agency, suppose agency_ids 81 and 84
#list_series(id=91, by='agencies')
##Call the get_values() for this agency and series 91 and 92
get_values(jurisdiction = 38, series = c(91,92), time = c(1990,2018), agency = c(81,84))
list_series()
get_values(jurisdiction = 38, series = c(91,92), time = c(1990,2000), industry = c('111','33'))
get_values(jurisdiction = 38, series = c(92), time = c(1990,2000), industry = c('111','33'))
get_values(jurisdiction = 38, series = c(92), time = c(1990,2000), industry = c('111','33'), agency = 66)
get_values(jurisdiction = 38, series = c(92), time = c(1990,2000), industry = c('111','33'), agency = 66)
agencies <- get_agencies()
agency_by_industry <- get_values(jurisdiction = 38,
series = c(92), time = c(1990,2000),
industry = c('111','33'),
agency = 66)
agencies <- get_agencies()
agency_by_industry <- get_values(jurisdiction = 38,
series = c(92), time = c(1990,2000),
industry = c('111','33'),
agency = 66)
agency_restrictions_ind <- agency_by_industry %>%
dplyr::left_join(agencies, by=c('agency_id'='agency_agency_id'))
agencies <- get_agencies()
agency_by_industry <- get_values(jurisdiction = 38,
series = c(92), time = c(1990,2000),
industry = c('111','33'),
agency = 66)
agency_restrictions_ind <- agency_by_industry %>%
dplyr::left_join(agencies, by=c('agency_agency_id'='agency_id'))
head(agency_restrictions_ind)
library(regdataAPI)
install.packages("pander")
help(snakecase)
help("snakecase")
library(snakecase)
help(snakecase)
help("snakecase")
??snakecase
help(pander)
devtools::use_mit_license("Mercatus Center")
usethis::use_mit_license()
usethis::use_mit_license("Mercatus Center")
usethis::use_testthat()
install.packages("testthat")
usethis::use_testthat()
devtools::document()
install()
devtools::install()
library(regcensusAPI)
help(regcensusAPI)
help("regcensusAPI")
devtools::document()
??regcensusAPI
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("curl")
library(curl)
get_agencies(38)
library(curl)
usethis::use_testthat()
usethis::use_test()
usethis::use_test(null,open = interactive())
use_test()
usethis::use_test()
usethis::use_test("data_frames.R")
use_test()
devtools::test()
library(regcensusAPI)
examples(regcensusAPI)
examples("regcensusAPI")
example("regcensusAPI")
example("dplyr")
install_github("QuantGov/regcensus-api-client-R")
install.packages("githubinstall")
install_github("QuantGov/regcensus-api-client-R")
library(devtools)
install.packages("devtools")
install_github("QuantGov/regcensus-api-client-R")
library(devtools)
remove.packages(devtools)
remove.packages("devtools")
install.packages("devtools",dep=T)
library(devtools)
devtools::document()
get_values(jurisdiction = 38, series=9,time=c(1990,1991))
devtools::load_all(".")
get_values(jurisdiction = 38, series=9,time=c(1990,1991))
get_values(jurisdiction = 38, series=9,time=c(2017))
get_values(jurisdiction = 38, series=1,time=c(2017))
get_values(jurisdiction = 38, series=1,time=c(2017),industry = c('0'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('0'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('111'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('11'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('112'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('114'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('113'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('111'))
get_values(jurisdiction = 38, series=9,time=c(2017),industry = c('210'))
get_values(jurisdiction = 38, series=9,time=c(2010:2017),industry = c('111'))
get_values(jurisdiction = 33, series=9,time=c(2018),industry = c('325'))
library(tidyverse)
install.packages("tidyverse",dep=T)
install.packages("snakecase",dep=T)
install.packages("jsonlite",dep=T)
install.packages("curl",dep=T)
install.packages("pander",dep=T)
library(devtools)
library(devtools)
library(regcensusAPI)
get_agencies()
install.packages("curl")
get_agencies()
View(agencies)
View(agencies)
get_agencies()
=======
if (length(series) > 0 & !is.na(series)) {
url_compose <- paste0(url_compose, "&series=", series_str)
} else {
print("Provide valid series id. Select valid series IDs from the following:")
get_series() %>% dplyr::select(seriesID,seriesName)
stop("Invalid series ID specified.")
}
#ensure the correct dates are selected
if (length(date) > 0 & !is.na(date)) {
url_compose <- paste0(url_compose, "&date=", date_str)
} else {
stop("Invalid dates specified")
}
if (date_is_range) {
url_compose <- paste0(url_compose, "&dateIsRange=true")
}
else {
url_compose <- paste0(url_compose, "&dateIsRange=false")
}
if (summary) {
url_compose <- paste0(url_compose, "&summary=true")
} else {
url_compose <- paste0(url_compose, "&summary=false")
}
if (filtered_only) {
url_compose <- paste0(url_compose, "&filteredOnly=true")
} else {
url_compose <- paste0(url_compose, "&filteredOnly=false")
print("Unfiltered results are not reliable. Use at your own discretion.")
}
if (length(document_type) > 0 & !is.na(document_type)) {
#dt <- get_document_types()
url_compose <-
paste0(url_compose, "&documentType=", document_type_str)
} else {
print("Select valid Document Type (documentType) from the following list:")
get_document_types() %>% dplyr::select(document_type=documentSubtypeID,document_name = subtypeName)
}
if (length(agencies) > 0) {
url_compose <- paste0(url_compose, "&agencies=", agency_str)
}
return(make_api_call(url_compose, TRUE))
}
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(1,2), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values <- function(jurisdictions = c(38),
industry_type = NA,
industries = NA,
series = 1,
date = c('2015', '2019'),
agencies = c(0),
date_is_range = TRUE,
filtered_only = TRUE,
summary = TRUE,
document_type = 1) {
#list of industry options
industry_types <-
c("all", "2-Digit", "3-Digit", "4-Digit", "5-Digit", "6-Digit")
#parse parameters
series_str <- paste(series, collapse = ",")
date_str <- paste(date, collapse = ",")
agency_str <- paste(agencies, collapse = ",")
document_type_str <- paste(document_type, collapse = ",")
#if names are used, find the corresponding jurisdiction IDs
if (length(jurisdictions) > 0 & !is.na(jurisdictions)) {
if (!is.numeric(jurisdictions)) {
jur_str <- paste(find_jurisdiction(jurisdictions), collapse = ",")
} else {
jur_str <- paste(jurisdictions, collapse = ",")
}
url_compose <-
paste0(get_baseURL(), "/values?jurisdictions=", jur_str)
} else {
print("Jurisdiction is required. Select valid jurisdiction IDs from the following:")
print(get_jurisdictions())
stop("Invalid jurisdiction specified.")
}
#ensure correct industry type is selected
if (!is.na(industry_type)) {
# get list of industry types
industry_list <- get_industries(jurisdiction = jurisdictions) %>%
dplyr::mutate(ndigits = stringi::stri_length(industryCode))
#print(industry_list)
## 2-digit
n <- case_when(industry_type == "2-Digit" ~ 2,
industry_type == "3-Digit" ~ 3,
industry_type == "4-Digit" ~ 4,
industry_type == "5-Digit" ~ 5,
industry_type == "6-Digit" ~ 6,
TRUE ~ 7)
if(n==7){
selected_industry_types <- industry_list %>% select(industryCode) %>% distinct()
} else {
selected_industry_types <- industry_list %>% dplyr::select(industryCode, ndigits) %>%
dplyr::filter(ndigits == n) %>%
dplyr::distinct()
}
print(industries)
} else {
selected_industry_types <- NA
}
if(is.na(industries) && is.na(as.list(selected_industry_types$industryCode))){
print("Provide valid industry code or industry type (eg. 3-Digit, 2-Digits.)")
print("Select valid industryType from ")
print(industry_types)
stop("Invalid industry type specified.")
}
if(!is.na(industries) & !is.na(selected_industry_types)){
stop("You have to select either industry type or industry code; not both.")
}
if (!is.na(industries) & is.na(selected_industry_types))  {
url_compose <- paste0(url_compose, "&industry=", paste(industries, collapse = ","))
} else if (!is.na(selected_industry_types) & is.na(industries)){
url_compose <- paste0(url_compose, "&industry=", paste(selected_industry_types$industryCode, collapse = ","))
}
#ensure correct series IDs are selected
if (length(series) > 0 & !is.na(series)) {
url_compose <- paste0(url_compose, "&series=", series_str)
} else {
print("Provide valid series id. Select valid series IDs from the following:")
get_series() %>% dplyr::select(seriesID,seriesName)
stop("Invalid series ID specified.")
}
#ensure the correct dates are selected
if (length(date) > 0 & !is.na(date)) {
url_compose <- paste0(url_compose, "&date=", date_str)
} else {
stop("Invalid dates specified")
}
if (date_is_range) {
url_compose <- paste0(url_compose, "&dateIsRange=true")
}
else {
url_compose <- paste0(url_compose, "&dateIsRange=false")
}
if (summary) {
url_compose <- paste0(url_compose, "&summary=true")
} else {
url_compose <- paste0(url_compose, "&summary=false")
}
if (filtered_only) {
url_compose <- paste0(url_compose, "&filteredOnly=true")
} else {
url_compose <- paste0(url_compose, "&filteredOnly=false")
print("Unfiltered results are not reliable. Use at your own discretion.")
}
if (length(document_type) > 0 & !is.na(document_type)) {
#dt <- get_document_types()
url_compose <-
paste0(url_compose, "&documentType=", document_type_str)
} else {
print("Select valid Document Type (documentType) from the following list:")
get_document_types() %>% dplyr::select(document_type=documentSubtypeID,document_name = subtypeName)
}
if (length(agencies) > 0) {
url_compose <- paste0(url_compose, "&agencies=", agency_str)
}
return(make_api_call(url_compose, TRUE))
}
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(1,2), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values <- function(jurisdictions = c(38),
industry_type = NA,
industries = NA,
series = 1,
date = c('2015', '2019'),
agencies = c(0),
date_is_range = TRUE,
filtered_only = TRUE,
summary = TRUE,
document_type = 1) {
#list of industry options
industry_types <-
c("all", "2-Digit", "3-Digit", "4-Digit", "5-Digit", "6-Digit")
#parse parameters
series_str <- paste(series, collapse = ",")
date_str <- paste(date, collapse = ",")
agency_str <- paste(agencies, collapse = ",")
document_type_str <- paste(document_type, collapse = ",")
#if names are used, find the corresponding jurisdiction IDs
if (length(jurisdictions) > 0 & !is.na(jurisdictions)) {
if (!is.numeric(jurisdictions)) {
jur_str <- paste(find_jurisdiction(jurisdictions), collapse = ",")
} else {
jur_str <- paste(jurisdictions, collapse = ",")
}
url_compose <-
paste0(get_baseURL(), "/values?jurisdiction=", jur_str)
} else {
print("Jurisdiction is required. Select valid jurisdiction IDs from the following:")
print(get_jurisdictions())
stop("Invalid jurisdiction specified.")
}
#ensure correct industry type is selected
if (!is.na(industry_type)) {
# get list of industry types
industry_list <- get_industries(jurisdiction = jurisdictions) %>%
dplyr::mutate(ndigits = stringi::stri_length(industryCode))
#print(industry_list)
## 2-digit
n <- case_when(industry_type == "2-Digit" ~ 2,
industry_type == "3-Digit" ~ 3,
industry_type == "4-Digit" ~ 4,
industry_type == "5-Digit" ~ 5,
industry_type == "6-Digit" ~ 6,
TRUE ~ 7)
if(n==7){
selected_industry_types <- industry_list %>% select(industryCode) %>% distinct()
} else {
selected_industry_types <- industry_list %>% dplyr::select(industryCode, ndigits) %>%
dplyr::filter(ndigits == n) %>%
dplyr::distinct()
}
print(industries)
} else {
selected_industry_types <- NA
}
if(is.na(industries) && is.na(as.list(selected_industry_types$industryCode))){
print("Provide valid industry code or industry type (eg. 3-Digit, 2-Digits.)")
print("Select valid industryType from ")
print(industry_types)
stop("Invalid industry type specified.")
}
if(!is.na(industries) & !is.na(selected_industry_types)){
stop("You have to select either industry type or industry code; not both.")
}
if (!is.na(industries) & is.na(selected_industry_types))  {
url_compose <- paste0(url_compose, "&industry=", paste(industries, collapse = ","))
} else if (!is.na(selected_industry_types) & is.na(industries)){
url_compose <- paste0(url_compose, "&industry=", paste(selected_industry_types$industryCode, collapse = ","))
}
#ensure correct series IDs are selected
if (length(series) > 0 & !is.na(series)) {
url_compose <- paste0(url_compose, "&series=", series_str)
} else {
print("Provide valid series id. Select valid series IDs from the following:")
get_series() %>% dplyr::select(seriesID,seriesName)
stop("Invalid series ID specified.")
}
#ensure the correct dates are selected
if (length(date) > 0 & !is.na(date)) {
url_compose <- paste0(url_compose, "&date=", date_str)
} else {
stop("Invalid dates specified")
}
if (date_is_range) {
url_compose <- paste0(url_compose, "&dateIsRange=true")
}
else {
url_compose <- paste0(url_compose, "&dateIsRange=false")
}
if (summary) {
url_compose <- paste0(url_compose, "&summary=true")
} else {
url_compose <- paste0(url_compose, "&summary=false")
}
if (filtered_only) {
url_compose <- paste0(url_compose, "&filteredOnly=true")
} else {
url_compose <- paste0(url_compose, "&filteredOnly=false")
print("Unfiltered results are not reliable. Use at your own discretion.")
}
if (length(document_type) > 0 & !is.na(document_type)) {
#dt <- get_document_types()
url_compose <-
paste0(url_compose, "&documentType=", document_type_str)
} else {
print("Select valid Document Type (documentType) from the following list:")
get_document_types() %>% dplyr::select(document_type=documentSubtypeID,document_name = subtypeName)
}
if (length(agencies) > 0) {
url_compose <- paste0(url_compose, "&agencies=", agency_str)
}
return(make_api_call(url_compose, TRUE))
}
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(1,2), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values <- function(jurisdictions = c(38),
industry_type = NA,
industries = NA,
series = 1,
date = c('2015', '2019'),
agencies = NA,
date_is_range = TRUE,
filtered_only = TRUE,
summary = TRUE,
document_type = 1) {
#list of industry options
industry_types <-
c("all", "2-Digit", "3-Digit", "4-Digit", "5-Digit", "6-Digit")
#parse parameters
series_str <- paste(series, collapse = ",")
date_str <- paste(date, collapse = ",")
agency_str <- paste(agencies, collapse = ",")
document_type_str <- paste(document_type, collapse = ",")
#if names are used, find the corresponding jurisdiction IDs
if (length(jurisdictions) > 0 & !is.na(jurisdictions)) {
if (!is.numeric(jurisdictions)) {
jur_str <- paste(find_jurisdiction(jurisdictions), collapse = ",")
} else {
jur_str <- paste(jurisdictions, collapse = ",")
}
url_compose <-
paste0(get_baseURL(), "/values?jurisdiction=", jur_str)
} else {
print("Jurisdiction is required. Select valid jurisdiction IDs from the following:")
print(get_jurisdictions())
stop("Invalid jurisdiction specified.")
}
#ensure correct industry type is selected
if (!is.na(industry_type)) {
# get list of industry types
industry_list <- get_industries(jurisdiction = jurisdictions) %>%
dplyr::mutate(ndigits = stringi::stri_length(industryCode))
#print(industry_list)
## 2-digit
n <- case_when(industry_type == "2-Digit" ~ 2,
industry_type == "3-Digit" ~ 3,
industry_type == "4-Digit" ~ 4,
industry_type == "5-Digit" ~ 5,
industry_type == "6-Digit" ~ 6,
TRUE ~ 7)
if(n==7){
selected_industry_types <- industry_list %>% select(industryCode) %>% distinct()
} else {
selected_industry_types <- industry_list %>% dplyr::select(industryCode, ndigits) %>%
dplyr::filter(ndigits == n) %>%
dplyr::distinct()
}
print(industries)
} else {
selected_industry_types <- NA
}
if(is.na(industries) && is.na(as.list(selected_industry_types$industryCode))){
print("Provide valid industry code or industry type (eg. 3-Digit, 2-Digits.)")
print("Select valid industryType from ")
print(industry_types)
stop("Invalid industry type specified.")
}
if(!is.na(industries) & !is.na(selected_industry_types)){
stop("You have to select either industry type or industry code; not both.")
}
if (!is.na(industries) & is.na(selected_industry_types))  {
url_compose <- paste0(url_compose, "&industry=", paste(industries, collapse = ","))
} else if (!is.na(selected_industry_types) & is.na(industries)){
url_compose <- paste0(url_compose, "&industry=", paste(selected_industry_types$industryCode, collapse = ","))
}
#ensure correct series IDs are selected
if (length(series) > 0 & !is.na(series)) {
url_compose <- paste0(url_compose, "&series=", series_str)
} else {
print("Provide valid series id. Select valid series IDs from the following:")
get_series() %>% dplyr::select(seriesID,seriesName)
stop("Invalid series ID specified.")
}
#ensure the correct dates are selected
if (length(date) > 0 & !is.na(date)) {
url_compose <- paste0(url_compose, "&date=", date_str)
} else {
stop("Invalid dates specified")
}
if (date_is_range) {
url_compose <- paste0(url_compose, "&dateIsRange=true")
}
else {
url_compose <- paste0(url_compose, "&dateIsRange=false")
}
if (summary) {
url_compose <- paste0(url_compose, "&summary=true")
} else {
url_compose <- paste0(url_compose, "&summary=false")
}
if (filtered_only) {
url_compose <- paste0(url_compose, "&filteredOnly=true")
} else {
url_compose <- paste0(url_compose, "&filteredOnly=false")
print("Unfiltered results are not reliable. Use at your own discretion.")
}
if (length(document_type) > 0 & !is.na(document_type)) {
#dt <- get_document_types()
url_compose <-
paste0(url_compose, "&documentType=", document_type_str)
} else {
print("Select valid Document Type (documentType) from the following list:")
get_document_types() %>% dplyr::select(document_type=documentSubtypeID,document_name = subtypeName)
}
if (!is.na(agencies) & length(agencies) > 0) {
url_compose <- paste0(url_compose, "&agencies=", agency_str)
}
return(make_api_call(url_compose, TRUE))
}
get_industry_values <- function(jurisdictions = c(38),
industry_type = NA,
industries = NA,
series = 1,
date = c('2015', '2019'),
agencies = NA,
date_is_range = TRUE,
filtered_only = TRUE,
summary = TRUE,
document_type = 1) {
#list of industry options
industry_types <-
c("all", "2-Digit", "3-Digit", "4-Digit", "5-Digit", "6-Digit")
#parse parameters
series_str <- paste(series, collapse = ",")
date_str <- paste(date, collapse = ",")
agency_str <- paste(agencies, collapse = ",")
document_type_str <- paste(document_type, collapse = ",")
#if names are used, find the corresponding jurisdiction IDs
if (length(jurisdictions) > 0 & !is.na(jurisdictions)) {
if (!is.numeric(jurisdictions)) {
jur_str <- paste(find_jurisdiction(jurisdictions), collapse = ",")
} else {
jur_str <- paste(jurisdictions, collapse = ",")
}
url_compose <-
paste0(get_baseURL(), "/values?jurisdiction=", jur_str)
} else {
print("Jurisdiction is required. Select valid jurisdiction IDs from the following:")
print(get_jurisdictions())
stop("Invalid jurisdiction specified.")
}
#ensure correct industry type is selected
if (!is.na(industry_type)) {
# get list of industry types
industry_list <- get_industries(jurisdiction = jurisdictions) %>%
dplyr::mutate(ndigits = stringi::stri_length(industryCode))
#print(industry_list)
## 2-digit
n <- case_when(industry_type == "2-Digit" ~ 2,
industry_type == "3-Digit" ~ 3,
industry_type == "4-Digit" ~ 4,
industry_type == "5-Digit" ~ 5,
industry_type == "6-Digit" ~ 6,
TRUE ~ 7)
if(n==7){
selected_industry_types <- industry_list %>% select(industryCode) %>% distinct()
} else {
selected_industry_types <- industry_list %>% dplyr::select(industryCode, ndigits) %>%
dplyr::filter(ndigits == n) %>%
dplyr::distinct()
}
print(industries)
} else {
selected_industry_types <- NA
}
if(is.na(industries) && is.na(as.list(selected_industry_types$industryCode))){
print("Provide valid industry code or industry type (eg. 3-Digit, 2-Digits.)")
print("Select valid industryType from ")
print(industry_types)
stop("Invalid industry type specified.")
}
if(!is.na(industries) & !is.na(selected_industry_types)){
stop("You have to select either industry type or industry code; not both.")
}
if (!is.na(industries) & is.na(selected_industry_types))  {
url_compose <- paste0(url_compose, "&industry=", paste(industries, collapse = ","))
} else if (!is.na(selected_industry_types) & is.na(industries)){
url_compose <- paste0(url_compose, "&industry=", paste(selected_industry_types$industryCode, collapse = ","))
}
#ensure correct series IDs are selected
if (length(series) > 0 & !is.na(series)) {
url_compose <- paste0(url_compose, "&series=", series_str)
} else {
print("Provide valid series id. Select valid series IDs from the following:")
get_series() %>% dplyr::select(seriesID,seriesName)
stop("Invalid series ID specified.")
}
#ensure the correct dates are selected
if (length(date) > 0 & !is.na(date)) {
url_compose <- paste0(url_compose, "&date=", date_str)
} else {
stop("Invalid dates specified")
}
if (date_is_range) {
url_compose <- paste0(url_compose, "&dateIsRange=true")
}
else {
url_compose <- paste0(url_compose, "&dateIsRange=false")
}
if (summary) {
url_compose <- paste0(url_compose, "&summary=true")
} else {
url_compose <- paste0(url_compose, "&summary=false")
}
if (filtered_only) {
url_compose <- paste0(url_compose, "&filteredOnly=true")
} else {
url_compose <- paste0(url_compose, "&filteredOnly=false")
print("Unfiltered results are not reliable. Use at your own discretion.")
}
if (length(document_type) > 0 & !is.na(document_type)) {
#dt <- get_document_types()
url_compose <-
paste0(url_compose, "&documentType=", document_type_str)
} else {
print("Select valid Document Type (documentType) from the following list:")
get_document_types() %>% dplyr::select(document_type=documentSubtypeID,document_name = subtypeName)
}
if (!is.na(agencies) & length(agencies) > 0) {
url_compose <- paste0(url_compose, "&agencies=", agency_str)
}
return(make_api_call(url_compose, TRUE))
}
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(1,2), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(9), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(9,1), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(9), dat = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
library(regcensusAPI)
devtools::build()
devtools::build()
install.packages("C:/Users/admin.kampaabeng/Projects/MercatusProjects/regcensusAPI_0.1.2.4.tar.gz", repos = NULL, type = "source")
remove.packages("regcensusAPI")
install.packages("C:/Users/admin.kampaabeng/Projects/MercatusProjects/regcensusAPI_0.1.2.4.tar.gz", repos = NULL, type = "source")
>>>>>>> kampaabeng
