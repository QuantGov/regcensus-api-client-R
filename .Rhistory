if (length(series) > 0 & !is.na(series)) {
url_compose <- paste0(url_compose, "&series=", series_str)
} else {
print("Provide valid series id. Select valid series IDs from the following:")
get_series() %>% dplyr::select(seriesID,seriesName)
stop("Invalid series ID specified.")
}
#ensure the correct dates are selected
if (length(date) > 0 & !is.na(date)) {
url_compose <- paste0(url_compose, "&date=", date_str)
} else {
stop("Invalid dates specified")
}
if (date_is_range) {
url_compose <- paste0(url_compose, "&dateIsRange=true")
}
else {
url_compose <- paste0(url_compose, "&dateIsRange=false")
}
if (summary) {
url_compose <- paste0(url_compose, "&summary=true")
} else {
url_compose <- paste0(url_compose, "&summary=false")
}
if (filtered_only) {
url_compose <- paste0(url_compose, "&filteredOnly=true")
} else {
url_compose <- paste0(url_compose, "&filteredOnly=false")
print("Unfiltered results are not reliable. Use at your own discretion.")
}
if (length(document_type) > 0 & !is.na(document_type)) {
#dt <- get_document_types()
url_compose <-
paste0(url_compose, "&documentType=", document_type_str)
} else {
print("Select valid Document Type (documentType) from the following list:")
get_document_types() %>% dplyr::select(document_type=documentSubtypeID,document_name = subtypeName)
}
if (length(agencies) > 0) {
url_compose <- paste0(url_compose, "&agencies=", agency_str)
}
return(make_api_call(url_compose, TRUE))
}
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(1,2), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values <- function(jurisdictions = c(38),
industry_type = NA,
industries = NA,
series = 1,
date = c('2015', '2019'),
agencies = c(0),
date_is_range = TRUE,
filtered_only = TRUE,
summary = TRUE,
document_type = 1) {
#list of industry options
industry_types <-
c("all", "2-Digit", "3-Digit", "4-Digit", "5-Digit", "6-Digit")
#parse parameters
series_str <- paste(series, collapse = ",")
date_str <- paste(date, collapse = ",")
agency_str <- paste(agencies, collapse = ",")
document_type_str <- paste(document_type, collapse = ",")
#if names are used, find the corresponding jurisdiction IDs
if (length(jurisdictions) > 0 & !is.na(jurisdictions)) {
if (!is.numeric(jurisdictions)) {
jur_str <- paste(find_jurisdiction(jurisdictions), collapse = ",")
} else {
jur_str <- paste(jurisdictions, collapse = ",")
}
url_compose <-
paste0(get_baseURL(), "/values?jurisdictions=", jur_str)
} else {
print("Jurisdiction is required. Select valid jurisdiction IDs from the following:")
print(get_jurisdictions())
stop("Invalid jurisdiction specified.")
}
#ensure correct industry type is selected
if (!is.na(industry_type)) {
# get list of industry types
industry_list <- get_industries(jurisdiction = jurisdictions) %>%
dplyr::mutate(ndigits = stringi::stri_length(industryCode))
#print(industry_list)
## 2-digit
n <- case_when(industry_type == "2-Digit" ~ 2,
industry_type == "3-Digit" ~ 3,
industry_type == "4-Digit" ~ 4,
industry_type == "5-Digit" ~ 5,
industry_type == "6-Digit" ~ 6,
TRUE ~ 7)
if(n==7){
selected_industry_types <- industry_list %>% select(industryCode) %>% distinct()
} else {
selected_industry_types <- industry_list %>% dplyr::select(industryCode, ndigits) %>%
dplyr::filter(ndigits == n) %>%
dplyr::distinct()
}
print(industries)
} else {
selected_industry_types <- NA
}
if(is.na(industries) && is.na(as.list(selected_industry_types$industryCode))){
print("Provide valid industry code or industry type (eg. 3-Digit, 2-Digits.)")
print("Select valid industryType from ")
print(industry_types)
stop("Invalid industry type specified.")
}
if(!is.na(industries) & !is.na(selected_industry_types)){
stop("You have to select either industry type or industry code; not both.")
}
if (!is.na(industries) & is.na(selected_industry_types))  {
url_compose <- paste0(url_compose, "&industry=", paste(industries, collapse = ","))
} else if (!is.na(selected_industry_types) & is.na(industries)){
url_compose <- paste0(url_compose, "&industry=", paste(selected_industry_types$industryCode, collapse = ","))
}
#ensure correct series IDs are selected
if (length(series) > 0 & !is.na(series)) {
url_compose <- paste0(url_compose, "&series=", series_str)
} else {
print("Provide valid series id. Select valid series IDs from the following:")
get_series() %>% dplyr::select(seriesID,seriesName)
stop("Invalid series ID specified.")
}
#ensure the correct dates are selected
if (length(date) > 0 & !is.na(date)) {
url_compose <- paste0(url_compose, "&date=", date_str)
} else {
stop("Invalid dates specified")
}
if (date_is_range) {
url_compose <- paste0(url_compose, "&dateIsRange=true")
}
else {
url_compose <- paste0(url_compose, "&dateIsRange=false")
}
if (summary) {
url_compose <- paste0(url_compose, "&summary=true")
} else {
url_compose <- paste0(url_compose, "&summary=false")
}
if (filtered_only) {
url_compose <- paste0(url_compose, "&filteredOnly=true")
} else {
url_compose <- paste0(url_compose, "&filteredOnly=false")
print("Unfiltered results are not reliable. Use at your own discretion.")
}
if (length(document_type) > 0 & !is.na(document_type)) {
#dt <- get_document_types()
url_compose <-
paste0(url_compose, "&documentType=", document_type_str)
} else {
print("Select valid Document Type (documentType) from the following list:")
get_document_types() %>% dplyr::select(document_type=documentSubtypeID,document_name = subtypeName)
}
if (length(agencies) > 0) {
url_compose <- paste0(url_compose, "&agencies=", agency_str)
}
return(make_api_call(url_compose, TRUE))
}
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(1,2), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values <- function(jurisdictions = c(38),
industry_type = NA,
industries = NA,
series = 1,
date = c('2015', '2019'),
agencies = c(0),
date_is_range = TRUE,
filtered_only = TRUE,
summary = TRUE,
document_type = 1) {
#list of industry options
industry_types <-
c("all", "2-Digit", "3-Digit", "4-Digit", "5-Digit", "6-Digit")
#parse parameters
series_str <- paste(series, collapse = ",")
date_str <- paste(date, collapse = ",")
agency_str <- paste(agencies, collapse = ",")
document_type_str <- paste(document_type, collapse = ",")
#if names are used, find the corresponding jurisdiction IDs
if (length(jurisdictions) > 0 & !is.na(jurisdictions)) {
if (!is.numeric(jurisdictions)) {
jur_str <- paste(find_jurisdiction(jurisdictions), collapse = ",")
} else {
jur_str <- paste(jurisdictions, collapse = ",")
}
url_compose <-
paste0(get_baseURL(), "/values?jurisdiction=", jur_str)
} else {
print("Jurisdiction is required. Select valid jurisdiction IDs from the following:")
print(get_jurisdictions())
stop("Invalid jurisdiction specified.")
}
#ensure correct industry type is selected
if (!is.na(industry_type)) {
# get list of industry types
industry_list <- get_industries(jurisdiction = jurisdictions) %>%
dplyr::mutate(ndigits = stringi::stri_length(industryCode))
#print(industry_list)
## 2-digit
n <- case_when(industry_type == "2-Digit" ~ 2,
industry_type == "3-Digit" ~ 3,
industry_type == "4-Digit" ~ 4,
industry_type == "5-Digit" ~ 5,
industry_type == "6-Digit" ~ 6,
TRUE ~ 7)
if(n==7){
selected_industry_types <- industry_list %>% select(industryCode) %>% distinct()
} else {
selected_industry_types <- industry_list %>% dplyr::select(industryCode, ndigits) %>%
dplyr::filter(ndigits == n) %>%
dplyr::distinct()
}
print(industries)
} else {
selected_industry_types <- NA
}
if(is.na(industries) && is.na(as.list(selected_industry_types$industryCode))){
print("Provide valid industry code or industry type (eg. 3-Digit, 2-Digits.)")
print("Select valid industryType from ")
print(industry_types)
stop("Invalid industry type specified.")
}
if(!is.na(industries) & !is.na(selected_industry_types)){
stop("You have to select either industry type or industry code; not both.")
}
if (!is.na(industries) & is.na(selected_industry_types))  {
url_compose <- paste0(url_compose, "&industry=", paste(industries, collapse = ","))
} else if (!is.na(selected_industry_types) & is.na(industries)){
url_compose <- paste0(url_compose, "&industry=", paste(selected_industry_types$industryCode, collapse = ","))
}
#ensure correct series IDs are selected
if (length(series) > 0 & !is.na(series)) {
url_compose <- paste0(url_compose, "&series=", series_str)
} else {
print("Provide valid series id. Select valid series IDs from the following:")
get_series() %>% dplyr::select(seriesID,seriesName)
stop("Invalid series ID specified.")
}
#ensure the correct dates are selected
if (length(date) > 0 & !is.na(date)) {
url_compose <- paste0(url_compose, "&date=", date_str)
} else {
stop("Invalid dates specified")
}
if (date_is_range) {
url_compose <- paste0(url_compose, "&dateIsRange=true")
}
else {
url_compose <- paste0(url_compose, "&dateIsRange=false")
}
if (summary) {
url_compose <- paste0(url_compose, "&summary=true")
} else {
url_compose <- paste0(url_compose, "&summary=false")
}
if (filtered_only) {
url_compose <- paste0(url_compose, "&filteredOnly=true")
} else {
url_compose <- paste0(url_compose, "&filteredOnly=false")
print("Unfiltered results are not reliable. Use at your own discretion.")
}
if (length(document_type) > 0 & !is.na(document_type)) {
#dt <- get_document_types()
url_compose <-
paste0(url_compose, "&documentType=", document_type_str)
} else {
print("Select valid Document Type (documentType) from the following list:")
get_document_types() %>% dplyr::select(document_type=documentSubtypeID,document_name = subtypeName)
}
if (length(agencies) > 0) {
url_compose <- paste0(url_compose, "&agencies=", agency_str)
}
return(make_api_call(url_compose, TRUE))
}
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(1,2), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values <- function(jurisdictions = c(38),
industry_type = NA,
industries = NA,
series = 1,
date = c('2015', '2019'),
agencies = NA,
date_is_range = TRUE,
filtered_only = TRUE,
summary = TRUE,
document_type = 1) {
#list of industry options
industry_types <-
c("all", "2-Digit", "3-Digit", "4-Digit", "5-Digit", "6-Digit")
#parse parameters
series_str <- paste(series, collapse = ",")
date_str <- paste(date, collapse = ",")
agency_str <- paste(agencies, collapse = ",")
document_type_str <- paste(document_type, collapse = ",")
#if names are used, find the corresponding jurisdiction IDs
if (length(jurisdictions) > 0 & !is.na(jurisdictions)) {
if (!is.numeric(jurisdictions)) {
jur_str <- paste(find_jurisdiction(jurisdictions), collapse = ",")
} else {
jur_str <- paste(jurisdictions, collapse = ",")
}
url_compose <-
paste0(get_baseURL(), "/values?jurisdiction=", jur_str)
} else {
print("Jurisdiction is required. Select valid jurisdiction IDs from the following:")
print(get_jurisdictions())
stop("Invalid jurisdiction specified.")
}
#ensure correct industry type is selected
if (!is.na(industry_type)) {
# get list of industry types
industry_list <- get_industries(jurisdiction = jurisdictions) %>%
dplyr::mutate(ndigits = stringi::stri_length(industryCode))
#print(industry_list)
## 2-digit
n <- case_when(industry_type == "2-Digit" ~ 2,
industry_type == "3-Digit" ~ 3,
industry_type == "4-Digit" ~ 4,
industry_type == "5-Digit" ~ 5,
industry_type == "6-Digit" ~ 6,
TRUE ~ 7)
if(n==7){
selected_industry_types <- industry_list %>% select(industryCode) %>% distinct()
} else {
selected_industry_types <- industry_list %>% dplyr::select(industryCode, ndigits) %>%
dplyr::filter(ndigits == n) %>%
dplyr::distinct()
}
print(industries)
} else {
selected_industry_types <- NA
}
if(is.na(industries) && is.na(as.list(selected_industry_types$industryCode))){
print("Provide valid industry code or industry type (eg. 3-Digit, 2-Digits.)")
print("Select valid industryType from ")
print(industry_types)
stop("Invalid industry type specified.")
}
if(!is.na(industries) & !is.na(selected_industry_types)){
stop("You have to select either industry type or industry code; not both.")
}
if (!is.na(industries) & is.na(selected_industry_types))  {
url_compose <- paste0(url_compose, "&industry=", paste(industries, collapse = ","))
} else if (!is.na(selected_industry_types) & is.na(industries)){
url_compose <- paste0(url_compose, "&industry=", paste(selected_industry_types$industryCode, collapse = ","))
}
#ensure correct series IDs are selected
if (length(series) > 0 & !is.na(series)) {
url_compose <- paste0(url_compose, "&series=", series_str)
} else {
print("Provide valid series id. Select valid series IDs from the following:")
get_series() %>% dplyr::select(seriesID,seriesName)
stop("Invalid series ID specified.")
}
#ensure the correct dates are selected
if (length(date) > 0 & !is.na(date)) {
url_compose <- paste0(url_compose, "&date=", date_str)
} else {
stop("Invalid dates specified")
}
if (date_is_range) {
url_compose <- paste0(url_compose, "&dateIsRange=true")
}
else {
url_compose <- paste0(url_compose, "&dateIsRange=false")
}
if (summary) {
url_compose <- paste0(url_compose, "&summary=true")
} else {
url_compose <- paste0(url_compose, "&summary=false")
}
if (filtered_only) {
url_compose <- paste0(url_compose, "&filteredOnly=true")
} else {
url_compose <- paste0(url_compose, "&filteredOnly=false")
print("Unfiltered results are not reliable. Use at your own discretion.")
}
if (length(document_type) > 0 & !is.na(document_type)) {
#dt <- get_document_types()
url_compose <-
paste0(url_compose, "&documentType=", document_type_str)
} else {
print("Select valid Document Type (documentType) from the following list:")
get_document_types() %>% dplyr::select(document_type=documentSubtypeID,document_name = subtypeName)
}
if (!is.na(agencies) & length(agencies) > 0) {
url_compose <- paste0(url_compose, "&agencies=", agency_str)
}
return(make_api_call(url_compose, TRUE))
}
get_industry_values <- function(jurisdictions = c(38),
industry_type = NA,
industries = NA,
series = 1,
date = c('2015', '2019'),
agencies = NA,
date_is_range = TRUE,
filtered_only = TRUE,
summary = TRUE,
document_type = 1) {
#list of industry options
industry_types <-
c("all", "2-Digit", "3-Digit", "4-Digit", "5-Digit", "6-Digit")
#parse parameters
series_str <- paste(series, collapse = ",")
date_str <- paste(date, collapse = ",")
agency_str <- paste(agencies, collapse = ",")
document_type_str <- paste(document_type, collapse = ",")
#if names are used, find the corresponding jurisdiction IDs
if (length(jurisdictions) > 0 & !is.na(jurisdictions)) {
if (!is.numeric(jurisdictions)) {
jur_str <- paste(find_jurisdiction(jurisdictions), collapse = ",")
} else {
jur_str <- paste(jurisdictions, collapse = ",")
}
url_compose <-
paste0(get_baseURL(), "/values?jurisdiction=", jur_str)
} else {
print("Jurisdiction is required. Select valid jurisdiction IDs from the following:")
print(get_jurisdictions())
stop("Invalid jurisdiction specified.")
}
#ensure correct industry type is selected
if (!is.na(industry_type)) {
# get list of industry types
industry_list <- get_industries(jurisdiction = jurisdictions) %>%
dplyr::mutate(ndigits = stringi::stri_length(industryCode))
#print(industry_list)
## 2-digit
n <- case_when(industry_type == "2-Digit" ~ 2,
industry_type == "3-Digit" ~ 3,
industry_type == "4-Digit" ~ 4,
industry_type == "5-Digit" ~ 5,
industry_type == "6-Digit" ~ 6,
TRUE ~ 7)
if(n==7){
selected_industry_types <- industry_list %>% select(industryCode) %>% distinct()
} else {
selected_industry_types <- industry_list %>% dplyr::select(industryCode, ndigits) %>%
dplyr::filter(ndigits == n) %>%
dplyr::distinct()
}
print(industries)
} else {
selected_industry_types <- NA
}
if(is.na(industries) && is.na(as.list(selected_industry_types$industryCode))){
print("Provide valid industry code or industry type (eg. 3-Digit, 2-Digits.)")
print("Select valid industryType from ")
print(industry_types)
stop("Invalid industry type specified.")
}
if(!is.na(industries) & !is.na(selected_industry_types)){
stop("You have to select either industry type or industry code; not both.")
}
if (!is.na(industries) & is.na(selected_industry_types))  {
url_compose <- paste0(url_compose, "&industry=", paste(industries, collapse = ","))
} else if (!is.na(selected_industry_types) & is.na(industries)){
url_compose <- paste0(url_compose, "&industry=", paste(selected_industry_types$industryCode, collapse = ","))
}
#ensure correct series IDs are selected
if (length(series) > 0 & !is.na(series)) {
url_compose <- paste0(url_compose, "&series=", series_str)
} else {
print("Provide valid series id. Select valid series IDs from the following:")
get_series() %>% dplyr::select(seriesID,seriesName)
stop("Invalid series ID specified.")
}
#ensure the correct dates are selected
if (length(date) > 0 & !is.na(date)) {
url_compose <- paste0(url_compose, "&date=", date_str)
} else {
stop("Invalid dates specified")
}
if (date_is_range) {
url_compose <- paste0(url_compose, "&dateIsRange=true")
}
else {
url_compose <- paste0(url_compose, "&dateIsRange=false")
}
if (summary) {
url_compose <- paste0(url_compose, "&summary=true")
} else {
url_compose <- paste0(url_compose, "&summary=false")
}
if (filtered_only) {
url_compose <- paste0(url_compose, "&filteredOnly=true")
} else {
url_compose <- paste0(url_compose, "&filteredOnly=false")
print("Unfiltered results are not reliable. Use at your own discretion.")
}
if (length(document_type) > 0 & !is.na(document_type)) {
#dt <- get_document_types()
url_compose <-
paste0(url_compose, "&documentType=", document_type_str)
} else {
print("Select valid Document Type (documentType) from the following list:")
get_document_types() %>% dplyr::select(document_type=documentSubtypeID,document_name = subtypeName)
}
if (!is.na(agencies) & length(agencies) > 0) {
url_compose <- paste0(url_compose, "&agencies=", agency_str)
}
return(make_api_call(url_compose, TRUE))
}
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(1,2), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(9), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(9,1), date = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
get_industry_values(industry_type = "3-Digit", jurisdictions = 38, series = c(9), dat = c(2010, 2011), date_is_range = TRUE, filtered = TRUE)
library(regcensusAPI)
devtools::build()
devtools::build()
install.packages("C:/Users/admin.kampaabeng/Projects/MercatusProjects/regcensusAPI_0.1.2.4.tar.gz", repos = NULL, type = "source")
remove.packages("regcensusAPI")
install.packages("C:/Users/admin.kampaabeng/Projects/MercatusProjects/regcensusAPI_0.1.2.4.tar.gz", repos = NULL, type = "source")
