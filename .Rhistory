install.packages("testthat")
help(testthat)
??testthat
devtools::load_all(".")
library(regdata)
regdata::get_agencies()
library(jsonlite)
regdata::get_agencies()
rm(regdata)
devtools::load_all(".")
regdata::get_agencies()
agencies <- regdata::get_agencies()
View(agencies)
help("regdata")
??regdata
seriesListUS<-regdata::get_seriesyear(38)
View(seriesListUS)
jurisdictions <- regdata::get_jurisdictions()
View(jurisdictions)
metadata <- regdata::get_seriesyear()
View(metadata)
totalRestrictions <- regdata::get_values(geoCode = c("0","00","000"),
seriesCode = "RG_RSTR0000001A",
time = c(1970,2016),
dateIsRange = TRUE)
View(totalRestrictions)
totalRestrictions %>% select(series=series.seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction.jurisdictionName) ->nationalRestrictions
library(tidyverse)
totalRestrictions %>% select(series=series.seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction.jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series=`series.seriesCode`,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction.jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series=series$seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction.jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series=series$seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series=seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series="series.seriesName",
values=seriesValue,
year=seriesYear,
jurisdiction=jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(series="series.seriesName",
values=seriesValue,
year=seriesYear,
jurisdiction="jurisdiction.jurisdictionName") ->nationalRestrictions
names(totalRestrictions)
totalRestrictions %>% select(series=totalRestrictions$series$seriesCode,
values=seriesValue,
year=seriesYear,
jurisdiction=totalRestrictions$jurisdiction$jurisdictionName) ->nationalRestrictions
View(totalRestrictions)
totalRestrictions %>% select(
values=seriesValue,
year=seriesYear,
jurisdiction=totalRestrictions$jurisdiction$jurisdictionName) ->nationalRestrictions
totalRestrictions %>% select(
values=seriesValue,
year=seriesYear,
totalRestrictions$jurisdiction$jurisdictionName) ->nationalRestrictions
packrat::init(options = list(external.packages = c("jsonlite", "tidyverse")))
install.packages("RevoUtils")
packrat::init(options = list(external.packages = c("jsonlite", "tidyverse")))
devtools::load_all(".")
library(regdataAPI)
get_values(0,c("RG_RSTR0000001A"),2018,NA,NA,FALSE)
values_df <- as.data.frame(json)
return(values_df)
# Values API request requires three parameters
#   1. seriesCode(s)
#   2. time(s)
get_values <- function(geoCode, seriesCode, time, agency = NA, industry = NA, dateIsRange = TRUE) {
# E.g., http://ec2-54-225-4-62.compute-1.amazonaws.com:8080/regdata/values?geo=06&seriesCode=RG_RSTR00000002NA&time=2019
geoCodestr <- paste(geoCode, collapse=",")
seriesCodestr <- paste(seriesCode, collapse=",")
timestr <- paste(time, collapse = ",")
if (dateIsRange) {
apicall <- paste0(get_baseURL(), "/values?geos=", geoCodestr, "&seriesCodes=", seriesCodestr, "&time=", timestr, "&dateIsRange=", dateIsRange)
} else {
apicall <- paste0(get_baseURL(), "/values?geos=", geoCodestr, "&seriesCodes=", seriesCodestr, "&time=", timestr)
}
json <- jsonlite::fromJSON(apicall, flatten = T) #8/25/2019: Kofi added the flatten option to T, included full fromJSON reference
values_df <- as.data.frame(json)
return(values_df)
}
get_values(0,c("RG_QLTY1000470Z"),2018,NA,NA,FALSE)
View(json)
get_values(0,c("RG_QLTY1000470Z","RG_QLTY1000471Z","RG_QLTY1000472Z"),2018,NA,NA,FALSE)
library(regdataAPI)
library(regdataAPI)
library(regdataAPI)
get_values(0,c("RG_QLTY1000470Z","RG_QLTY1000471Z","RG_QLTY1000472Z"),2018,NA,NA,FALSE)
library(regdataAPI)
